useNavigate
- 리액트 훅
- 페이지 이동을 도와주는 함수가 있음

<Route path="/detail/:id" element={<Detail />} />
id 부분이 url 파라미터
id 부분은 마음대로 작명 가능
useParams: 유저가 URL 파라미터에 입력한거 가져올 때 사용

- 404 패이지 만들기
<Route path="*" route 설정된 경로 외에 모든 페이지 />

nested routed
- 라우트 안에 라우트를 넣을 수 있음
Outlet
- 라우트 안에 라우트를 넣을 때 사용하는 컴포넌트

find()
- 배열에서 특정 조건을 만족하는 요소를 찾아서 반환
- 조건을 만족하는 요소가 없으면 undefined 반환
- array자료.find(()=>{return 조건식})

react life cycle
detail 컴포넌트를 활용하여 설명
- 페이지에 장착 (mount) -> 상세페이지에 접속 했을 때
- 업데이트도 됨 (update) -> state가 변경 되었을 때
- 컴포넌트 제거 (unmount) -> 메인으로 돌아갔을 때

라이프 사이클 왜 배움?
각 스텝별로 중간중간 간섭 가능
-> 중간중간 코드 실행 가능

useEffect 쓰는 이유
- 동작원리 : 실행 시점이 약간 다름
useEffect 안에 있는 코드는 html 렌더링 후에 동작합니다.
예를들어 for문을 10000번 정도 돌리는 코드가 있다고 가정.
이 코드를 useEffect가 아닌 return 전에 작성하면, for문이 10000번 돌고 나서야 화면이 렌더링 됨.
하지만 useEffect안에서 작성한다면, 화면이 렌더링 된 후에 for문이 돌아감.

useEffect 사용예시
- 어려운 연산
- 서버에서 데이터 가져오는 작업
- 타이머 장착할 때


서버와 요청

redux 왜씀?
- 컴포넌트간 state 공유 편해짐

Redux의 state 변경하는 법
1. state 수정해주는 함수 만들고
2. 원할 때 그 함수 실행해달라고 store.js에 요청